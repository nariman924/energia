<?php

namespace console\controllers;

use common\components\loaders\CategoriesLoader;
use common\components\loaders\OffersLoader;
use common\components\loaders\PicturesLoader;
use SimpleXMLElement;
use yii\console\Controller;

class ParseController extends Controller
{
    protected $silent = false;
    private $startMemoryUsage;
    private $startTime;
    private static $xml;

    public function beforeAction($action)
    {
        $this->_startTimer();
        $this->_startMemory();

        self::$xml = new SimpleXMLElement(
            'https://voltmarket.ru/bitrix/catalog_export/volt_partners.php',
            LIBXML_PARSEHUGE,
            true
        );

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    public function afterAction($action, $result)
    {
        $this->_printReportTimer();
        $this->_printReportMemory();
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    public function actionCategories()
    {
        $cat = new CategoriesLoader(self::$xml);
        $cat->load();
    }

    public function actionOffers()
    {
        $off = new OffersLoader(self::$xml);
        $off->load();
    }

    public function actionPictures()
    {
        $pic = new PicturesLoader(self::$xml);
        $pic->load();
    }

    public function actionAll()
    {
        $cat = new CategoriesLoader(self::$xml);

        if ($cat->load()) {
            $off = new OffersLoader(self::$xml);
            if ($off->load()) {
                $pic = new PicturesLoader(self::$xml);
                $pic->load();
            }
        }
    }

    /**
     * Запись текущего времени
     * @return int
     */
    protected function _startTimer()
    {
        return $this->startTime = time() + (int)microtime();
    }

    /**
     * Расчёт прошедшего с начала времени
     * @return int
     */
    protected function _endTimer()
    {
        return round(time() + (int)microtime() - $this->startTime, 2);
    }

    /**
     * Установка стартового значения расхода памяти
     */
    protected function _startMemory()
    {
        return $this->startMemoryUsage = memory_get_usage();
    }

    /**
     * Получение текущего значения расхода памяти
     */
    protected function _getMemory()
    {
        return round((memory_get_usage() - $this->startMemoryUsage) / pow(1024, 2), 3) . ' Mb';
    }

    /**
     * Получение пикового значения расхода памяти
     */
    protected function _getMemoryPeak()
    {
        return round(memory_get_peak_usage() / pow(1024, 2), 3) . ' Mb';
    }

    protected function _printReportTimer()
    {
        if (!$this->silent) {
            echo 'Execution time: ' . $this->_endTimer() . ' seconds' . "\r\n";
        }
    }

    protected function _printReportMemory()
    {
        if (!$this->silent) {
            echo 'Current script usage memory: ' . $this->_getMemory() . "\r\n";
            echo 'Peak common usage memory: ' . $this->_getMemoryPeak() . "\r\n";
        }
    }
}